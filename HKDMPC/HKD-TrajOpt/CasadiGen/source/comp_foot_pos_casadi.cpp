/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) comp_foot_pos_casadi_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[7] = {3, 1, 0, 3, 0, 1, 2};
static const casadi_int casadi_s1[5] = {1, 1, 0, 1, 0};

/* compute_foot_position:(i0[3],i1[3],i2[3],i3)->(o0[3]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a3, a4, a5, a6, a7, a8, a9;
  a0=arg[1]? arg[1][0] : 0;
  a1=cos(a0);
  a2=arg[1]? arg[1][1] : 0;
  a3=cos(a2);
  a4=(a1*a3);
  a5=1.9000000000000000e-01;
  a6=-1.;
  a7=arg[3]? arg[3][0] : 0;
  a8=3.;
  a8=(a7/a8);
  a8=floor(a8);
  a8=pow(a6,a8);
  a5=(a5*a8);
  a8=-1.9500000000000001e-01;
  a9=arg[2]? arg[2][1] : 0;
  a9=(-a9);
  a10=cos(a9);
  a11=arg[2]? arg[2][2] : 0;
  a11=(-a11);
  a12=sin(a11);
  a10=(a10*a12);
  a13=sin(a9);
  a11=cos(a11);
  a14=(a13*a11);
  a10=(a10+a14);
  a10=(a8*a10);
  a14=-2.0899999999999999e-01;
  a13=(a14*a13);
  a10=(a10+a13);
  a5=(a5+a10);
  a4=(a4*a5);
  a2=sin(a2);
  a10=(a1*a2);
  a13=arg[1]? arg[1][2] : 0;
  a15=sin(a13);
  a16=(a10*a15);
  a0=sin(a0);
  a13=cos(a13);
  a17=(a0*a13);
  a16=(a16-a17);
  a17=4.9000000000000002e-02;
  a18=pow(a6,a7);
  a17=(a17*a18);
  a18=arg[2]? arg[2][0] : 0;
  a19=sin(a18);
  a20=sin(a9);
  a21=(a19*a20);
  a21=(a21*a12);
  a9=cos(a9);
  a22=(a19*a9);
  a22=(a22*a11);
  a21=(a21-a22);
  a21=(a8*a21);
  a22=cos(a18);
  a23=6.2000000000000000e-02;
  a6=pow(a6,a7);
  a23=(a23*a6);
  a22=(a22*a23);
  a14=(a14*a9);
  a19=(a19*a14);
  a22=(a22-a19);
  a21=(a21+a22);
  a17=(a17+a21);
  a16=(a16*a17);
  a4=(a4+a16);
  a16=(a0*a15);
  a10=(a10*a13);
  a16=(a16+a10);
  a10=cos(a18);
  a9=(a10*a9);
  a9=(a9*a11);
  a20=(a10*a20);
  a20=(a20*a12);
  a9=(a9-a20);
  a8=(a8*a9);
  a10=(a10*a14);
  a18=sin(a18);
  a18=(a18*a23);
  a10=(a10+a18);
  a8=(a8+a10);
  a16=(a16*a8);
  a4=(a4+a16);
  a16=arg[0]? arg[0][0] : 0;
  a4=(a4+a16);
  if (res[0]!=0) res[0][0]=a4;
  a4=(a0*a3);
  a4=(a4*a5);
  a16=(a1*a13);
  a0=(a0*a2);
  a10=(a0*a15);
  a16=(a16+a10);
  a16=(a16*a17);
  a4=(a4+a16);
  a0=(a0*a13);
  a1=(a1*a15);
  a0=(a0-a1);
  a0=(a0*a8);
  a4=(a4+a0);
  a0=arg[0]? arg[0][1] : 0;
  a4=(a4+a0);
  if (res[0]!=0) res[0][1]=a4;
  a15=(a3*a15);
  a15=(a15*a17);
  a2=(a2*a5);
  a15=(a15-a2);
  a3=(a3*a13);
  a3=(a3*a8);
  a15=(a15+a3);
  a3=arg[0]? arg[0][2] : 0;
  a15=(a15+a3);
  if (res[0]!=0) res[0][2]=a15;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int compute_foot_position(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int compute_foot_position_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int compute_foot_position_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void compute_foot_position_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int compute_foot_position_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void compute_foot_position_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void compute_foot_position_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void compute_foot_position_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int compute_foot_position_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int compute_foot_position_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real compute_foot_position_default_in(casadi_int i){
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* compute_foot_position_name_in(casadi_int i){
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* compute_foot_position_name_out(casadi_int i){
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* compute_foot_position_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s0;
    case 2: return casadi_s0;
    case 3: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* compute_foot_position_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int compute_foot_position_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 4;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


