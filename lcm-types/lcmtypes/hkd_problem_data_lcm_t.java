/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class hkd_problem_data_lcm_t implements lcm.lcm.LCMEncodable
{
    public int n_timesteps;
    public float contacts[][];
    public float times[];
    public float pos_r[][];
    public float eul_r[][];
    public float vel_r[][];
    public float omega_r[][];
    public float qdummy_r[][];
    public float pos[][];
    public float eul[][];
    public float vel[][];
    public float omega[][];
    public float qdummy[][];
 
    public hkd_problem_data_lcm_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0baab93fbdfb118dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.hkd_problem_data_lcm_t.class))
            return 0L;
 
        classes.add(lcmtypes.hkd_problem_data_lcm_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.n_timesteps); 
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.contacts[a][b]); 
            }
        }
 
        for (int a = 0; a < this.n_timesteps; a++) {
            outs.writeFloat(this.times[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.pos_r[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.eul_r[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.vel_r[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.omega_r[a][b]); 
            }
        }
 
        for (int a = 0; a < 12; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.qdummy_r[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.pos[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.eul[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.vel[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.omega[a][b]); 
            }
        }
 
        for (int a = 0; a < 12; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                outs.writeFloat(this.qdummy[a][b]); 
            }
        }
 
    }
 
    public hkd_problem_data_lcm_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public hkd_problem_data_lcm_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.hkd_problem_data_lcm_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.hkd_problem_data_lcm_t o = new lcmtypes.hkd_problem_data_lcm_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.n_timesteps = ins.readInt();
 
        this.contacts = new float[(int) 4][(int) n_timesteps];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.contacts[a][b] = ins.readFloat();
            }
        }
 
        this.times = new float[(int) n_timesteps];
        for (int a = 0; a < this.n_timesteps; a++) {
            this.times[a] = ins.readFloat();
        }
 
        this.pos_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.pos_r[a][b] = ins.readFloat();
            }
        }
 
        this.eul_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.eul_r[a][b] = ins.readFloat();
            }
        }
 
        this.vel_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.vel_r[a][b] = ins.readFloat();
            }
        }
 
        this.omega_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.omega_r[a][b] = ins.readFloat();
            }
        }
 
        this.qdummy_r = new float[(int) 12][(int) n_timesteps];
        for (int a = 0; a < 12; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.qdummy_r[a][b] = ins.readFloat();
            }
        }
 
        this.pos = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.pos[a][b] = ins.readFloat();
            }
        }
 
        this.eul = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.eul[a][b] = ins.readFloat();
            }
        }
 
        this.vel = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.vel[a][b] = ins.readFloat();
            }
        }
 
        this.omega = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.omega[a][b] = ins.readFloat();
            }
        }
 
        this.qdummy = new float[(int) 12][(int) n_timesteps];
        for (int a = 0; a < 12; a++) {
            for (int b = 0; b < this.n_timesteps; b++) {
                this.qdummy[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public lcmtypes.hkd_problem_data_lcm_t copy()
    {
        lcmtypes.hkd_problem_data_lcm_t outobj = new lcmtypes.hkd_problem_data_lcm_t();
        outobj.n_timesteps = this.n_timesteps;
 
        outobj.contacts = new float[(int) 4][(int) n_timesteps];
        for (int a = 0; a < 4; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.contacts[a], 0, outobj.contacts[a], 0, this.n_timesteps);        }
 
        outobj.times = new float[(int) n_timesteps];
        if (this.n_timesteps > 0)
            System.arraycopy(this.times, 0, outobj.times, 0, this.n_timesteps); 
        outobj.pos_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.pos_r[a], 0, outobj.pos_r[a], 0, this.n_timesteps);        }
 
        outobj.eul_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.eul_r[a], 0, outobj.eul_r[a], 0, this.n_timesteps);        }
 
        outobj.vel_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.vel_r[a], 0, outobj.vel_r[a], 0, this.n_timesteps);        }
 
        outobj.omega_r = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.omega_r[a], 0, outobj.omega_r[a], 0, this.n_timesteps);        }
 
        outobj.qdummy_r = new float[(int) 12][(int) n_timesteps];
        for (int a = 0; a < 12; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.qdummy_r[a], 0, outobj.qdummy_r[a], 0, this.n_timesteps);        }
 
        outobj.pos = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.pos[a], 0, outobj.pos[a], 0, this.n_timesteps);        }
 
        outobj.eul = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.eul[a], 0, outobj.eul[a], 0, this.n_timesteps);        }
 
        outobj.vel = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.vel[a], 0, outobj.vel[a], 0, this.n_timesteps);        }
 
        outobj.omega = new float[(int) 3][(int) n_timesteps];
        for (int a = 0; a < 3; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.omega[a], 0, outobj.omega[a], 0, this.n_timesteps);        }
 
        outobj.qdummy = new float[(int) 12][(int) n_timesteps];
        for (int a = 0; a < 12; a++) {
            if (this.n_timesteps > 0)
                System.arraycopy(this.qdummy[a], 0, outobj.qdummy[a], 0, this.n_timesteps);        }
 
        return outobj;
    }
 
}

