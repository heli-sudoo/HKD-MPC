/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class solver_info_lcmt implements lcm.lcm.LCMEncodable
{
    public int n_iter;
    public float cost[];
    public float dyn_feas[];
    public float eqn_feas[];
    public float ineq_feas[];
 
    public solver_info_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc0fe49bc4d9f56ebL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.solver_info_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.solver_info_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.n_iter); 
 
        for (int a = 0; a < this.n_iter; a++) {
            outs.writeFloat(this.cost[a]); 
        }
 
        for (int a = 0; a < this.n_iter; a++) {
            outs.writeFloat(this.dyn_feas[a]); 
        }
 
        for (int a = 0; a < this.n_iter; a++) {
            outs.writeFloat(this.eqn_feas[a]); 
        }
 
        for (int a = 0; a < this.n_iter; a++) {
            outs.writeFloat(this.ineq_feas[a]); 
        }
 
    }
 
    public solver_info_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public solver_info_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.solver_info_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.solver_info_lcmt o = new lcmtypes.solver_info_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.n_iter = ins.readInt();
 
        this.cost = new float[(int) n_iter];
        for (int a = 0; a < this.n_iter; a++) {
            this.cost[a] = ins.readFloat();
        }
 
        this.dyn_feas = new float[(int) n_iter];
        for (int a = 0; a < this.n_iter; a++) {
            this.dyn_feas[a] = ins.readFloat();
        }
 
        this.eqn_feas = new float[(int) n_iter];
        for (int a = 0; a < this.n_iter; a++) {
            this.eqn_feas[a] = ins.readFloat();
        }
 
        this.ineq_feas = new float[(int) n_iter];
        for (int a = 0; a < this.n_iter; a++) {
            this.ineq_feas[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.solver_info_lcmt copy()
    {
        lcmtypes.solver_info_lcmt outobj = new lcmtypes.solver_info_lcmt();
        outobj.n_iter = this.n_iter;
 
        outobj.cost = new float[(int) n_iter];
        if (this.n_iter > 0)
            System.arraycopy(this.cost, 0, outobj.cost, 0, this.n_iter); 
        outobj.dyn_feas = new float[(int) n_iter];
        if (this.n_iter > 0)
            System.arraycopy(this.dyn_feas, 0, outobj.dyn_feas, 0, this.n_iter); 
        outobj.eqn_feas = new float[(int) n_iter];
        if (this.n_iter > 0)
            System.arraycopy(this.eqn_feas, 0, outobj.eqn_feas, 0, this.n_iter); 
        outobj.ineq_feas = new float[(int) n_iter];
        if (this.n_iter > 0)
            System.arraycopy(this.ineq_feas, 0, outobj.ineq_feas, 0, this.n_iter); 
        return outobj;
    }
 
}

