/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class solver_intermtraj_lcmt implements lcm.lcm.LCMEncodable
{
    public int tau_sz;
    public int x_sz;
    public int u_sz;
    public float x_tau[][];
    public float u_tau[][];
 
    public solver_intermtraj_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5f25d5b712298fbdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.solver_intermtraj_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.solver_intermtraj_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.tau_sz); 
 
        outs.writeInt(this.x_sz); 
 
        outs.writeInt(this.u_sz); 
 
        for (int a = 0; a < this.tau_sz; a++) {
            for (int b = 0; b < this.x_sz; b++) {
                outs.writeFloat(this.x_tau[a][b]); 
            }
        }
 
        for (int a = 0; a < this.tau_sz; a++) {
            for (int b = 0; b < this.u_sz; b++) {
                outs.writeFloat(this.u_tau[a][b]); 
            }
        }
 
    }
 
    public solver_intermtraj_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public solver_intermtraj_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.solver_intermtraj_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.solver_intermtraj_lcmt o = new lcmtypes.solver_intermtraj_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.tau_sz = ins.readInt();
 
        this.x_sz = ins.readInt();
 
        this.u_sz = ins.readInt();
 
        this.x_tau = new float[(int) tau_sz][(int) x_sz];
        for (int a = 0; a < this.tau_sz; a++) {
            for (int b = 0; b < this.x_sz; b++) {
                this.x_tau[a][b] = ins.readFloat();
            }
        }
 
        this.u_tau = new float[(int) tau_sz][(int) u_sz];
        for (int a = 0; a < this.tau_sz; a++) {
            for (int b = 0; b < this.u_sz; b++) {
                this.u_tau[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public lcmtypes.solver_intermtraj_lcmt copy()
    {
        lcmtypes.solver_intermtraj_lcmt outobj = new lcmtypes.solver_intermtraj_lcmt();
        outobj.tau_sz = this.tau_sz;
 
        outobj.x_sz = this.x_sz;
 
        outobj.u_sz = this.u_sz;
 
        outobj.x_tau = new float[(int) tau_sz][(int) x_sz];
        for (int a = 0; a < this.tau_sz; a++) {
            if (this.x_sz > 0)
                System.arraycopy(this.x_tau[a], 0, outobj.x_tau[a], 0, this.x_sz);        }
 
        outobj.u_tau = new float[(int) tau_sz][(int) u_sz];
        for (int a = 0; a < this.tau_sz; a++) {
            if (this.u_sz > 0)
                System.arraycopy(this.u_tau[a], 0, outobj.u_tau[a], 0, this.u_sz);        }
 
        return outobj;
    }
 
}

