/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class visualize_quadTraj_lcmt implements lcm.lcm.LCMEncodable
{
    public short len;
    public float WB_plan_dur;
    public float SRB_plan_dur;
    public float WB_dt;
    public float SRB_dt;
    public float pos[][];
    public float eul[][];
    public float vWorld[][];
    public float eulrate[][];
    public float qJ[][];
    public float pFoot[][];
    public float torque[][];
    public float grf[][];
    public float feas[];
 
    public visualize_quadTraj_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xcdf7562a37afd09aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.visualize_quadTraj_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.visualize_quadTraj_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeShort(this.len); 
 
        outs.writeFloat(this.WB_plan_dur); 
 
        outs.writeFloat(this.SRB_plan_dur); 
 
        outs.writeFloat(this.WB_dt); 
 
        outs.writeFloat(this.SRB_dt); 
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.pos[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.eul[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.vWorld[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.eulrate[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                outs.writeFloat(this.qJ[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                outs.writeFloat(this.pFoot[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                outs.writeFloat(this.torque[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                outs.writeFloat(this.grf[a][b]); 
            }
        }
 
        for (int a = 0; a < this.len; a++) {
            outs.writeFloat(this.feas[a]); 
        }
 
    }
 
    public visualize_quadTraj_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public visualize_quadTraj_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.visualize_quadTraj_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.visualize_quadTraj_lcmt o = new lcmtypes.visualize_quadTraj_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.len = ins.readShort();
 
        this.WB_plan_dur = ins.readFloat();
 
        this.SRB_plan_dur = ins.readFloat();
 
        this.WB_dt = ins.readFloat();
 
        this.SRB_dt = ins.readFloat();
 
        this.pos = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                this.pos[a][b] = ins.readFloat();
            }
        }
 
        this.eul = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                this.eul[a][b] = ins.readFloat();
            }
        }
 
        this.vWorld = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                this.vWorld[a][b] = ins.readFloat();
            }
        }
 
        this.eulrate = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 3; b++) {
                this.eulrate[a][b] = ins.readFloat();
            }
        }
 
        this.qJ = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                this.qJ[a][b] = ins.readFloat();
            }
        }
 
        this.pFoot = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                this.pFoot[a][b] = ins.readFloat();
            }
        }
 
        this.torque = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                this.torque[a][b] = ins.readFloat();
            }
        }
 
        this.grf = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            for (int b = 0; b < 12; b++) {
                this.grf[a][b] = ins.readFloat();
            }
        }
 
        this.feas = new float[(int) len];
        for (int a = 0; a < this.len; a++) {
            this.feas[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.visualize_quadTraj_lcmt copy()
    {
        lcmtypes.visualize_quadTraj_lcmt outobj = new lcmtypes.visualize_quadTraj_lcmt();
        outobj.len = this.len;
 
        outobj.WB_plan_dur = this.WB_plan_dur;
 
        outobj.SRB_plan_dur = this.SRB_plan_dur;
 
        outobj.WB_dt = this.WB_dt;
 
        outobj.SRB_dt = this.SRB_dt;
 
        outobj.pos = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.pos[a], 0, outobj.pos[a], 0, 3);        }
 
        outobj.eul = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.eul[a], 0, outobj.eul[a], 0, 3);        }
 
        outobj.vWorld = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.vWorld[a], 0, outobj.vWorld[a], 0, 3);        }
 
        outobj.eulrate = new float[(int) len][(int) 3];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.eulrate[a], 0, outobj.eulrate[a], 0, 3);        }
 
        outobj.qJ = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.qJ[a], 0, outobj.qJ[a], 0, 12);        }
 
        outobj.pFoot = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.pFoot[a], 0, outobj.pFoot[a], 0, 12);        }
 
        outobj.torque = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.torque[a], 0, outobj.torque[a], 0, 12);        }
 
        outobj.grf = new float[(int) len][(int) 12];
        for (int a = 0; a < this.len; a++) {
            System.arraycopy(this.grf[a], 0, outobj.grf[a], 0, 12);        }
 
        outobj.feas = new float[(int) len];
        if (this.len > 0)
            System.arraycopy(this.feas, 0, outobj.feas, 0, this.len); 
        return outobj;
    }
 
}

