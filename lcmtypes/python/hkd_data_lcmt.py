"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class hkd_data_lcmt(object):
    __slots__ = ["reset_mpc", "MS", "mpctime", "contact", "p", "vWorld", "rpy", "omegaBody", "qJ", "foot_placements"]

    __typenames__ = ["boolean", "boolean", "double", "int32_t", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, [4], [3], [3], [3], [3], [12], [12]]

    def __init__(self):
        self.reset_mpc = False
        self.MS = False
        self.mpctime = 0.0
        self.contact = [ 0 for dim0 in range(4) ]
        self.p = [ 0.0 for dim0 in range(3) ]
        self.vWorld = [ 0.0 for dim0 in range(3) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.omegaBody = [ 0.0 for dim0 in range(3) ]
        self.qJ = [ 0.0 for dim0 in range(12) ]
        self.foot_placements = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(hkd_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbd", self.reset_mpc, self.MS, self.mpctime))
        buf.write(struct.pack('>4i', *self.contact[:4]))
        buf.write(struct.pack('>3f', *self.p[:3]))
        buf.write(struct.pack('>3f', *self.vWorld[:3]))
        buf.write(struct.pack('>3f', *self.rpy[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody[:3]))
        buf.write(struct.pack('>12f', *self.qJ[:12]))
        buf.write(struct.pack('>12f', *self.foot_placements[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != hkd_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return hkd_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = hkd_data_lcmt()
        self.reset_mpc = bool(struct.unpack('b', buf.read(1))[0])
        self.MS = bool(struct.unpack('b', buf.read(1))[0])
        self.mpctime = struct.unpack(">d", buf.read(8))[0]
        self.contact = struct.unpack('>4i', buf.read(16))
        self.p = struct.unpack('>3f', buf.read(12))
        self.vWorld = struct.unpack('>3f', buf.read(12))
        self.rpy = struct.unpack('>3f', buf.read(12))
        self.omegaBody = struct.unpack('>3f', buf.read(12))
        self.qJ = struct.unpack('>12f', buf.read(48))
        self.foot_placements = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if hkd_data_lcmt in parents: return 0
        tmphash = (0x22a0844571444c45) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if hkd_data_lcmt._packed_fingerprint is None:
            hkd_data_lcmt._packed_fingerprint = struct.pack(">Q", hkd_data_lcmt._get_hash_recursive([]))
        return hkd_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

