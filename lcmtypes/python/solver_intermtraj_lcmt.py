"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class solver_intermtraj_lcmt(object):
    __slots__ = ["tau_sz", "x_sz", "u_sz", "x_tau", "u_tau"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "float", "float"]

    __dimensions__ = [None, None, None, ["tau_sz", "x_sz"], ["tau_sz", "u_sz"]]

    def __init__(self):
        self.tau_sz = 0
        self.x_sz = 0
        self.u_sz = 0
        self.x_tau = []
        self.u_tau = []

    def encode(self):
        buf = BytesIO()
        buf.write(solver_intermtraj_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iii", self.tau_sz, self.x_sz, self.u_sz))
        for i0 in range(self.tau_sz):
            buf.write(struct.pack('>%df' % self.x_sz, *self.x_tau[i0][:self.x_sz]))
        for i0 in range(self.tau_sz):
            buf.write(struct.pack('>%df' % self.u_sz, *self.u_tau[i0][:self.u_sz]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != solver_intermtraj_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return solver_intermtraj_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = solver_intermtraj_lcmt()
        self.tau_sz, self.x_sz, self.u_sz = struct.unpack(">iii", buf.read(12))
        self.x_tau = []
        for i0 in range(self.tau_sz):
            self.x_tau.append(struct.unpack('>%df' % self.x_sz, buf.read(self.x_sz * 4)))
        self.u_tau = []
        for i0 in range(self.tau_sz):
            self.u_tau.append(struct.unpack('>%df' % self.u_sz, buf.read(self.u_sz * 4)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if solver_intermtraj_lcmt in parents: return 0
        tmphash = (0x5f25d5b712298fbd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if solver_intermtraj_lcmt._packed_fingerprint is None:
            solver_intermtraj_lcmt._packed_fingerprint = struct.pack(">Q", solver_intermtraj_lcmt._get_hash_recursive([]))
        return solver_intermtraj_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

