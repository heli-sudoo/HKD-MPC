"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class visualize_quadTraj_lcmt(object):
    __slots__ = ["len", "WB_plan_dur", "SRB_plan_dur", "WB_dt", "SRB_dt", "pos", "eul", "vWorld", "eulrate", "qJ", "pFoot", "torque", "grf", "feas"]

    __typenames__ = ["int16_t", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, ["len", 3], ["len", 3], ["len", 3], ["len", 3], ["len", 12], ["len", 12], ["len", 12], ["len", 12], ["len"]]

    def __init__(self):
        self.len = 0
        self.WB_plan_dur = 0.0
        self.SRB_plan_dur = 0.0
        self.WB_dt = 0.0
        self.SRB_dt = 0.0
        self.pos = []
        self.eul = []
        self.vWorld = []
        self.eulrate = []
        self.qJ = []
        self.pFoot = []
        self.torque = []
        self.grf = []
        self.feas = []

    def encode(self):
        buf = BytesIO()
        buf.write(visualize_quadTraj_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hffff", self.len, self.WB_plan_dur, self.SRB_plan_dur, self.WB_dt, self.SRB_dt))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.pos[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.eul[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.vWorld[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.eulrate[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>12f', *self.qJ[i0][:12]))
        for i0 in range(self.len):
            buf.write(struct.pack('>12f', *self.pFoot[i0][:12]))
        for i0 in range(self.len):
            buf.write(struct.pack('>12f', *self.torque[i0][:12]))
        for i0 in range(self.len):
            buf.write(struct.pack('>12f', *self.grf[i0][:12]))
        buf.write(struct.pack('>%df' % self.len, *self.feas[:self.len]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != visualize_quadTraj_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return visualize_quadTraj_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = visualize_quadTraj_lcmt()
        self.len, self.WB_plan_dur, self.SRB_plan_dur, self.WB_dt, self.SRB_dt = struct.unpack(">hffff", buf.read(18))
        self.pos = []
        for i0 in range(self.len):
            self.pos.append(struct.unpack('>3f', buf.read(12)))
        self.eul = []
        for i0 in range(self.len):
            self.eul.append(struct.unpack('>3f', buf.read(12)))
        self.vWorld = []
        for i0 in range(self.len):
            self.vWorld.append(struct.unpack('>3f', buf.read(12)))
        self.eulrate = []
        for i0 in range(self.len):
            self.eulrate.append(struct.unpack('>3f', buf.read(12)))
        self.qJ = []
        for i0 in range(self.len):
            self.qJ.append(struct.unpack('>12f', buf.read(48)))
        self.pFoot = []
        for i0 in range(self.len):
            self.pFoot.append(struct.unpack('>12f', buf.read(48)))
        self.torque = []
        for i0 in range(self.len):
            self.torque.append(struct.unpack('>12f', buf.read(48)))
        self.grf = []
        for i0 in range(self.len):
            self.grf.append(struct.unpack('>12f', buf.read(48)))
        self.feas = struct.unpack('>%df' % self.len, buf.read(self.len * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if visualize_quadTraj_lcmt in parents: return 0
        tmphash = (0xcdf7562a37afd09a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if visualize_quadTraj_lcmt._packed_fingerprint is None:
            visualize_quadTraj_lcmt._packed_fingerprint = struct.pack(">Q", visualize_quadTraj_lcmt._get_hash_recursive([]))
        return visualize_quadTraj_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

