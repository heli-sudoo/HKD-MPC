"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class mc_towr_data_t(object):
    __slots__ = ["len", "microtime", "base_pos", "base_vel", "eul", "eulrate", "ee_pos", "contact"]

    __typenames__ = ["int16_t", "int32_t", "float", "float", "float", "float", "float", "int16_t"]

    __dimensions__ = [None, ["len"], ["len", 3], ["len", 3], ["len", 3], ["len", 3], ["len", 12], ["len", 4]]

    def __init__(self):
        self.len = 0
        self.microtime = []
        self.base_pos = []
        self.base_vel = []
        self.eul = []
        self.eulrate = []
        self.ee_pos = []
        self.contact = []

    def encode(self):
        buf = BytesIO()
        buf.write(mc_towr_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.len))
        buf.write(struct.pack('>%di' % self.len, *self.microtime[:self.len]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.base_pos[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.base_vel[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.eul[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>3f', *self.eulrate[i0][:3]))
        for i0 in range(self.len):
            buf.write(struct.pack('>12f', *self.ee_pos[i0][:12]))
        for i0 in range(self.len):
            buf.write(struct.pack('>4h', *self.contact[i0][:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mc_towr_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mc_towr_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mc_towr_data_t()
        self.len = struct.unpack(">h", buf.read(2))[0]
        self.microtime = struct.unpack('>%di' % self.len, buf.read(self.len * 4))
        self.base_pos = []
        for i0 in range(self.len):
            self.base_pos.append(struct.unpack('>3f', buf.read(12)))
        self.base_vel = []
        for i0 in range(self.len):
            self.base_vel.append(struct.unpack('>3f', buf.read(12)))
        self.eul = []
        for i0 in range(self.len):
            self.eul.append(struct.unpack('>3f', buf.read(12)))
        self.eulrate = []
        for i0 in range(self.len):
            self.eulrate.append(struct.unpack('>3f', buf.read(12)))
        self.ee_pos = []
        for i0 in range(self.len):
            self.ee_pos.append(struct.unpack('>12f', buf.read(48)))
        self.contact = []
        for i0 in range(self.len):
            self.contact.append(struct.unpack('>4h', buf.read(8)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if mc_towr_data_t in parents: return 0
        tmphash = (0x48a6694b91ab877) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mc_towr_data_t._packed_fingerprint is None:
            mc_towr_data_t._packed_fingerprint = struct.pack(">Q", mc_towr_data_t._get_hash_recursive([]))
        return mc_towr_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

